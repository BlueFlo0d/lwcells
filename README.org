#+TITLE:LWCELLS - Light Weight Cells
~LWCELLS~ is a dataflow extension to Common Lisp. It maintains a
consistent state of cells according to rules defined between them.
~LWCELLS~ is designed to be simple, clean, compositional and flexible.

* Tutorial
  Basic usage:
#+BEGIN_SRC lisp
  (use-package #:lwcells)
  (defvar *cell-1* (cell 1))
  (defvar *cell-2* (cell 2))
  (defvar *cell-3* (cell (+ (cell-ref *cell-1*) (cell-ref *cell-2*))))
  (cell-ref *cell-3*) ; => 3
  (setf (cell-ref *cell-2*) 5)
  (cell-ref *cell-3*) ; => 6
#+END_SRC

  Fancier syntax sugar that does the same thing as above:
#+BEGIN_SRC lisp
  (defcell *cell-1* 1)
  (defcell *cell-2* 2)
  (defcell *cell-3* (+ *cell-1* *cell-2*))
#+END_SRC
  *Hackers' note:* Under the hood, this stores the cell objects in
  variable like ~*cell-1*-cell~, and defines symbols like ~*cell-1*~
  themselves as symbol macros.

  There's also ~let-cell~ and ~let*-cell~ that does the similiar for
  lexical variables.

  Observers:
#+BEGIN_SRC lisp
  (defcell *cell-1* 1)
  (defcell *cell-2* 2)
  (defcell *cell-3* (+ *cell-1* *cell-2*))
  (defun report-assign (cell)
    (let ((*print-circle* t))
      (format t "Assigning ~a to ~a." (cell-ref cell) cell)))
  (add-observer *cell-3*-cell 'report-assign)
  (setf *cell-2* 4)
  ;; => Assigning 5 to #1=#S(CELL ...)
#+END_SRC
  *Hackers' note:* We have to bind ~*print-circle*~ to t here, because
  the reference graph of ~LWCELLS~ system is very cyclic (there are
  lots of pointer pairs in opposite direction) and will make the
  printer infinite loop otherwise.
  
  *Hackers' note:* Under the hood, observers are implemented as simply
  rules with only one dependency, and their dependencies are never
  changed. See the source for ~invoke-rule~.

  Convenience for CLOS:
#+BEGIN_SRC lisp
  (defmodel item () ((weight :cell 0 :initarg :weight)))
  (defmodel container ()
    ((items :cell nil)
     (weight :cell (reduce #'+ (items self) :key #'weight))))
  (defvar *container* (make-instance 'container))
  (weight *container*) ; => 0
  (push (make-instance 'item :weight 10) (items *container*))
  (weight *container*) ; => 10
#+END_SRC
  *Hackers' note:* Under the hood, ~defmodel~ expand into a
  ~defclass~, an ~initialize-instance~ method to store cell objects
  into slots, and some accessors method to read/write values from cell
  objects in the slots. You can then use the accessors method to
  transparently access reactive values. To get and manipulate the
  underlying cell objects, use ~slot-value~.

  ~defmodel~ doesn't use any MOP magic, and is fully compatible with
  standard CLOS classes.
  
* For the hackers
** What happens to cyclic dependencies?
#+BEGIN_SRC lisp
  (defcell *cell-1* 1)
  (invoke-rule (make-rule :function (lambda () (setf *cell-1* (1+ *cell-1*)))))
  ;; Debugger pops up with a cycle-error.
  ;; Some useful restart also provided: skip-invocation, increase-cycle-limit and deactivate-rule
#+END_SRC
  Hmm, that's expected. You can control how deep a circular invocation
  will trigger ~cycle-error~ using the variable ~*cycle-limit*~. Set it
  to nil to disable cycle detection completely.
  
  *Hackers' note:* The above ~invoke-rule~ and ~make-rule~ is the
  unsugared interface for using rules, it shouldn't be hard for a
  hacker to figure out what they do.

  Circularities can be useful, and fun. The nature is full of
  circularities in the wild! Just watch following:
#+BEGIN_SRC lisp
  (defun float-no-news-p (old-value new-value)
    (< (abs (- old-value new-value)) 1e-5)))
  (defcell* *cell-1* (:no-news-p 'float-no-news-p) 1)
  (invoke-rule (make-rule :function (lambda () (setf *cell-1* (cos *cell-1*)))))
  *cell-1* ; => 0.7390823
#+END_SRC
  The above produces the [[https://en.wikipedia.org/wiki/Dottie_number][Dottie number]].

  *Hackers' note:* ~defcell*~ is a somewhat more powerful version of
  ~defcell~. It accepts a list of options which get passed to
  ~make-cell~. Currently the only use is to set a different
  ~cell-no-news-p~. Read the docstring of ~(defstruct cell~)!
  There's also ~cell*~, somewhat more powerful version of ~cell~.
  
* Related works
  - [[https://github.com/kennytilton/cells][cells]] :: This is very
    powerful, but also very complicated. AFAIU cells are also always
    attached to slots and don't exist on their own. I might be
    wrong -- I don't understand all the code!
  - [[https://github.com/hu-dwim/hu.dwim.computed-class][computed-class]] ::
    A bit more complicated than ~lwcells~. Cells also seem to alway bind
    to slots, and it needs lots of ~computed-as~ everywhere.
    
* Documentation
  Read the source code! There isn't lots of code.
